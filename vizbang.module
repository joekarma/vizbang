<?php

/**
 * @file
 * A module that enhances the syntax of path based block visibility rules,
 * allowing paths already captured by wildcard to be negated by preceding
 * subpaths with an exclamation mark. In short, this module allows you to refine
 * your wildcard matches for block visibility.
 */


/**
 * Implements hook_module_implements_alter().
 *
 * Override the block module's block_list_alter hook with the function
 * defined in this module.
 */
function vizbang_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'block_list_alter') {
    unset($implementations['block']);
  }
}

/**
 * Implements hook_block_list_alter().
 *
 * Checks the page, user role, and user-specific visibility settings.
 * Removes the block if the visibility conditions are not met.
 * Enhances the path list to allow wild card matches to be narrowed down
 * with the negation operator, an exclamation mark.
 */
function vizbang_block_list_alter(&$blocks) {
  global $user, $theme_key;

  // Build an array of roles for each block.
  $block_roles = array();
  $result = db_query('SELECT module, delta, rid FROM {block_role}');
  foreach ($result as $record) {
    $block_roles[$record->module][$record->delta][] = $record->rid;
  }

  foreach ($blocks as $key => $block) {
    if (!isset($block->theme) || !isset($block->status) || $block->theme != $theme_key || $block->status != 1) {
      // This block was added by a contrib module, leave it in the list.
      continue;
    }

    // If a block has no roles associated, it is displayed for every role.
    // For blocks with roles associated, if none of the user's roles matches
    // the settings from this block, remove it from the block list.
    if (isset($block_roles[$block->module][$block->delta]) && !array_intersect($block_roles[$block->module][$block->delta], array_keys($user->roles))) {
      // No match.
      unset($blocks[$key]);
      continue;
    }

    // Use the user's block visibility setting, if necessary.
    if ($block->custom != BLOCK_CUSTOM_FIXED) {
      if ($user->uid && isset($user->data['block'][$block->module][$block->delta])) {
        $enabled = $user->data['block'][$block->module][$block->delta];
      }
      else {
        $enabled = ($block->custom == BLOCK_CUSTOM_ENABLED);
      }
    }
    else {
      $enabled = TRUE;
    }

    // Limited visibility blocks must list at least one page.
    if ($block->visibility == BLOCK_VISIBILITY_LISTED && empty($block->pages)) {
      $enabled = FALSE;
    }

    if (!$enabled) {
      unset($blocks[$key]);
      continue;
    }

    // Match path if necessary.
    if ($block->pages) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($block->pages);

      if ($block->visibility < BLOCK_VISIBILITY_PHP) {
        // Convert the Drupal path to lowercase.
        $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));

        // Check for a match. _vizbang_match_path searches all aliases for paths.
        $page_match = _vizbang_match_path($path, $pages);
          
        // When $block->visibility has a value of 0
        // (BLOCK_VISIBILITY_NOTLISTED), the block is displayed on all pages
        // except those listed in $block->pages. When set to 1
        // (BLOCK_VISIBILITY_LISTED), it is displayed only on those pages
        // listed in $block->pages.
        $page_match = !($block->visibility xor $page_match);
      }
      elseif (module_exists('php')) {
        $page_match = php_eval($block->pages);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }
    if (!$page_match) {
      unset($blocks[$key]);
    }
  }
}

/*function _vizbang_path_aliases($path) {
  drupal_
}*/

/**
 * Check if a path matches any pattern in a set of patterns.
 *
 * @param $path
 *   The path to match.
 * @param $patterns
 *   String containing a set of patterns separated by \n, \r or \r\n.
 *   Patterns that begin with an exclamation mark are inverted.
 *
 * @return
 *   Boolean value: TRUE if the path matches a pattern, FALSE otherwise.
 */
function _vizbang_match_path($path, $patterns) {

  // Convert path settings to a regular expression.
  // Therefore replace newlines with a logical or, /* with asterisks and the <front> with the frontpage.
  $to_replace = array(
    '/\\\\\*/',     // asterisks
    '/(^|\|)\\\\<front\\\\>(\r|\n|\\s*$)/' // <front>
  );
  $replacements = array(
    '.*',
    '\1' . preg_quote(variable_get('site_frontpage', 'node'), '/') . '\2'
  );
  $patterns_quoted = preg_quote($patterns, '/');
  $patterns_quoted = preg_replace($to_replace, $replacements, $patterns_quoted);

  $patterns_array = preg_split('/(\\r\\n?|\\n)+/', $patterns_quoted);

  for ($i = count($patterns_array) - 1; $i >= 0; $i--) {
    $current_pattern = $patterns_array[$i];

    if (substr($current_pattern, 0, 2) == '\\!') { // starts with an exclamation mark
      $current_pattern = subst($current_pattern, 2);

      if (preg_match('/' . $current_pattern . '/', $path)) {
        return FALSE;
      }
    } else {
      if (preg_match('/' . $current_pattern . '/', $path)) {
        return TRUE;
      }
    }
  }

  return FALSE;
}


// function _vizbang_match_path($path, $patterns) {
//   $regexps = &drupal_static(__FUNCTION__);

//   if (!isset($regexps[$patterns])) {
//     // Convert path settings to a regular expression.
//     // Therefore replace newlines with a logical or, /* with asterisks and the <front> with the frontpage.
//     $to_replace = array(
//       '/(\r\n?|\n)/', // newlines
//       '/\\\\\*/',     // asterisks
//       '/(^|\|)\\\\<front\\\\>($|\|)/' // <front>
//     );
//     $replacements = array(
//       '|',
//       '.*',
//       '\1' . preg_quote(variable_get('site_frontpage', 'node'), '/') . '\2'
//     );
//     $patterns_quoted = preg_quote($patterns, '/');
//     $regexps[$patterns] = '/^(' . preg_replace($to_replace, $replacements, $patterns_quoted) . ')$/';
//   }
//   return (bool)preg_match($regexps[$patterns], $path);
// }